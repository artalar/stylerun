{"version":3,"sources":["webpack:///../src/docs/Examples.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Example","Style","styled","React","input","update","className","type","onChange","e","currentTarget","value","Array","fill","map","isMDXComponent"],"mappings":"2RAWaA,G,UAAe,S,uMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,g/CA6DL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,8iBAAmjBC,SAAO,GAC3lBL,QACAH,kBACAS,eACAC,YACAC,UACAC,YAN2lB,gBAO3lBZ,IAP2lB,EAQ3lBH,eAR2lB,GAS1lBO,QAAQ,eAAc,WAAM,MACHS,WAAe,GAAhCC,EADoB,KACbC,EADa,KAE3B,OAAO,mBAAKC,UAAU,wBACxB,qBAAOC,KAAK,SAASC,SAAU,SAAAC,GAAC,OAAIJ,GAAQI,EAAEC,cAAcC,UAC3D,IAAIC,MAAMR,GAAOS,KAAK,MAAMC,KAAI,kBAAM,YAAC,IAAD,CAASpB,QAAQ,eACxD,YAAC,IAAD,CAAOA,QAAQ,SAAf,0LAMqCM,IANrC,MAMkDA,IANlD,oE,qMAsFNT,EAAWwB,gBAAiB","file":"component---src-docs-examples-mdx-5a88c567718cffb0c789.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/codespace/workspace/stylerun/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Example } from './AwesomeText';\nimport { Style, styled } from '../';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { styled, Style } from 'stylerun'\n\nconst AwesomeText = styled<{ isAwesome: boolean }>(\n  \\`div\\`,\n  ({ isAwesome, className, useCssVar }) => {\n    const [hue, updateHue] = React.useState(1)\n    React.useEffect(() => {\n      requestAnimationFrame(() => {\n        updateHue((hue + 1) % 360)\n      })\n    }, [hue])\n\n    const light = isAwesome ? 50 : 20\n    const colorVar = useCssVar(\\`hsl(\\${hue}, 100%, \\${light}%)\\`)\n\n    return \\`\n      .\\${className} {\n        padding: 0.25em;\n        background-color: \\${colorVar};\n      }\n    \\`\n  },\n)\n\nconst Consent = styled<{\n  options: Array<string>\n  onChange: React.SelectHTMLAttributes<HTMLSelectElement>['onChange']\n}>(({ className, options, onChange }) => (\n  <select className={className} onChange={onChange}>\n    {options.map(option => (\n      <option key={option}>{option}</option>\n    ))}\n  </select>\n))\n\nconst Example = styled(({ className }) => {\n  const [isAwesome, updateIsAwesome] = React.useState(true)\n\n  return (\n    <>\n      <div className={className}>\n        <Consent\n          options={[\\`yes\\`, \\`no\\`]}\n          onChange={e => updateIsAwesome(e.currentTarget.value === \\`yes\\`)}\n        />\n        <AwesomeText isAwesome={isAwesome}>Web is awesome!</AwesomeText>\n      </div>\n      <Style>{\\`\n          .\\${className} {\n            display: flex;\n            align-items: center;\n            width: fit-content;\n            box-shadow: 0 0 0.5em -0.2em;\n          }\n        \\`}</Style>\n    </>\n  )\n})\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [input, update] = React.useState(0)\\n  return (\\n    <div className=\\\"example-awesome-text\\\">\\n      <input type=\\\"number\\\" onChange={e => update(+e.currentTarget.value)} />\\n      {new Array(input).fill(null).map(() => (\\n        <Example />\\n      ))}\\n      <Style>{`\\n        .example-awesome-text {\\n          display: flex;\\n          flex-wrap: wrap;\\n          align-items: center;\\n        }\\n        .example-awesome-text > input, ${Example} + ${Example} {\\n          margin: 0.5rem;\\n        }\\n      `}</Style>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Example,\n      Style,\n      styled,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">{() => {\n        const [input, update] = React.useState(0);\n        return <div className=\"example-awesome-text\">\n      <input type=\"number\" onChange={e => update(+e.currentTarget.value)} />\n      {new Array(input).fill(null).map(() => <Example mdxType=\"Example\" />)}\n      <Style mdxType=\"Style\">{`\n          .example-awesome-text {\n            display: flex;\n            flex-wrap: wrap;\n            align-items: center;\n          }\n          .example-awesome-text > input, ${Example} + ${Example} {\n            margin: 0.5rem;\n          }\n        `}</Style>\n    </div>;\n      }}</Playground>\n    {\n      /*\n      ## Component as selector\n      > Component should accept and apply `className` property.\n      ```tsx\n      import { Style, styled } from 'stylerun';\n      import { TextInput as _TextInput } from 'example-ui-library'\n      const TextInput = styled(_TextInput)\n      export function Example() {\n       return (<>\n         <TextInput />\n         <Style>{`\n           ${TextInput} {\n             outline: none;\n           }\n           ${TextInput}:focus {\n             box-shadow: 0 0 5px rgba(81, 203, 238, 1);\n           }\n         `}</Style>\n       </>)\n      }\n      ```\n      ## New component\n      ```tsx\n      import { styled } from 'stylerun';\n      const TextInput = styled('input', ({ className }) => `\n       .${className} {\n         outline: none;\n       }\n       .${className}:focus {\n         box-shadow: 0 0 5px rgba(81, 203, 238, 1);\n       }\n      `)\n      export function Example() {\n       return (<>\n         <TextInput />\n       </>)\n      }\n      ```\n      ## useCssVar autobind\n      In this example value from props will be updated on each frame, but documents styles not changes, only autobinded css-variable.\n      ```tsx\n      import { styled } from 'stylerun';\n      const TextInput = styled(\n       'input',\n       ({ shadowOpasity = 1, className, useCssVar }) => `\n         .${className} {\n           outline: none;\n         }\n         .${className}:focus {\n           box-shadow: 0 0 5px rgba(81, 203, 238, ${useCssVar(shadowOpasity)});\n         }\n       `\n      )\n      export function Example() {\n       const [shadowOpasity, update] = React.useState(0)\n        React.useEffect(() => {\n         requestAnimationFrame(() => {\n           update((shadowOpasity + 1) % 100)\n         })\n       }, [shadowOpasity])\n        return (<>\n         <TextInput shadowOpasity={shadowOpasity / 100}/>\n       </>)\n      }\n      ```\n      Advanced example:\n      [![Advanced example](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/stylerun-vzw20)\n      */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}