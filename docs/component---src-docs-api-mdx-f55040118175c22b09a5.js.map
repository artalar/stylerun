{"version":3,"sources":["webpack:///../src/docs/API.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","AutoResizedInput","Style","styled","className","React","input","update","value","onChange","e","currentTarget","isMDXComponent"],"mappings":"6RAWaA,G,UAAe,S,kMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,+CAIL,kBACE,GAAM,SACL,0BAAYA,WAAW,MAAvB,UACH,0FAAyE,iBAAGA,WAAW,IACnF,KAAQ,0DAD6D,QAAzE,KAGA,qDAAoC,0BAAYA,WAAW,KAAvB,aAApC,KACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,8RAAiSC,SAAO,GACzUL,QACAH,kBACAS,eACAC,qBACAC,UACAC,YANyU,gBAOzUZ,IAPyU,EAQzUH,eARyU,GASxUO,QAAQ,eAAc,kBAAM,4BAC3B,wBAAUS,UAAU,eACpB,YAAC,IAAD,CAAOT,QAAQ,SAAf,0NAUJ,kBACE,GAAM,UACL,0BAAYC,WAAW,MAAvB,WACH,oCAAmB,iBAAGA,WAAW,IAC7B,KAAQ,iCADO,oBAAnB,iBAE+C,0BAAYA,WAAW,KAAvB,UAF/C,8GAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,itBAqBL,0DAAyC,0BAAYA,WAAW,KAAvB,UAAzC,wIAAoO,iBAAGA,WAAW,IAC9O,KAAQ,6CADwN,SAApO,6DAEgF,0BAAYA,WAAW,KAAvB,aAFhF,mJAGA,6FAA4E,iBAAGA,WAAW,IACtF,KAAQ,UADgE,SAA5E,qEAEwF,0BAAYA,WAAW,KAAvB,aAFxF,KAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,iQAiBL,uBACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,6OAUL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,uLAA0LC,SAAO,GAClOL,QACAH,kBACAS,eACAC,qBACAC,UACAC,YANkO,gBAOlOZ,IAPkO,EAQlOH,eARkO,GASjOO,QAAQ,eAAc,WAAM,MACHU,WAAe,IAAhCC,EADoB,KACbC,EADa,KAE3B,OAAO,YAAC,IAAD,CAAkBC,MAAOF,EAAOG,SAAU,SAAAC,GAAC,OAAIH,EAAOG,EAAEC,cAAcH,QAAQb,QAAQ,wBAEjG,kBACE,GAAM,aACL,0BAAYC,WAAW,MAAvB,cACH,qBAAG,iBAAGA,WAAW,IACb,KAAQ,gFADT,iBAAH,oHAGA,qBAAG,0BAAYA,WAAW,KAAvB,aAAH,cAAuE,0BAAYA,WAAW,KAAvB,UAAvE,uEAAiM,sBAAQA,WAAW,KAAnB,UAAjM,sGAAkV,iBAAGA,WAAW,IAC5V,KAAQ,oDADsU,gBAAlV,oCAE8D,iBAAGA,WAAW,IACxE,KAAQ,oGACP,0BAAYA,WAAW,KAAvB,aAJL,+DAKA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,y0C,gMAkDTJ,EAAWoB,gBAAiB","file":"component---src-docs-api-mdx-f55040118175c22b09a5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/codespace/workspace/stylerun/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { AutoResizedInput } from './AutoResizedInput';\nimport { Style, styled } from '../';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Style, styled } from 'stylerun'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"style\"\n    }}><inlineCode parentName=\"h2\">{`Style`}</inlineCode></h2>\n    <p>{`The Style component just cache and forward pasted styles into the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Glossary/Head\"\n      }}>{`head`}</a>{`.`}</p>\n    <p>{`Basic example with hand made `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{`:`}</p>\n    <Playground __position={0} __code={'() => (\\n  <>\\n    <textarea className=\\\"text-input\\\" />\\n    <Style>{`\\n          .text-input {\\n              font-size: 1em;\\n              outline: none;\\n          }\\n          .text-input:focus {\\n              box-shadow: 0 0 1em indigo;\\n          }\\n      `}</Style>\\n  </>\\n)'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      AutoResizedInput,\n      Style,\n      styled,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">{() => <>\n        <textarea className=\"text-input\" />\n        <Style mdxType=\"Style\">{`\n            .text-input {\n                font-size: 1em;\n                outline: none;\n            }\n            .text-input:focus {\n                box-shadow: 0 0 1em indigo;\n            }\n        `}</Style>\n    </>}</Playground>\n    <h2 {...{\n      \"id\": \"styled\"\n    }}><inlineCode parentName=\"h2\">{`styled`}</inlineCode></h2>\n    <p>{`Inspired by `}<a parentName=\"p\" {...{\n        \"href\": \"https://styled-components.com\"\n      }}>{`styled-component`}</a>{` Stylerun has `}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{` method for easily creation of styled components and wrap existed components to allow use it as selectors.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { styled } from 'stylerun'\n\n// classic input component with \\`className\\` prop and returns it \\`toString\\` method\nconst Input = styled('input')\nconsole.log(Input.className)  // 'sr_1_qj2c'\nconsole.log(Input.toString()) // '.sr_1_qj2c'\nconsole.log(Input + '')       // '.sr_1_qj2c'\nconsole.log(\\`\\${Input}\\`)       // '.sr_1_qj2c'\n\n// Fill free rewrite \\`className\\` for better debug\nInput.className = \\`example-input\\`\nconsole.log(Input.className)  // 'example-input'\nconsole.log(Input.toString()) // '.example-input'\nconsole.log(Input + '')       // '.example-input'\nconsole.log(\\`\\${Input}\\`)       // '.example-input'\n\nconst OtherInput = styled(Input)\nconsole.log(OtherInput.className)  // 'sr_2_qj2c'\n`}</code></pre>\n    <p>{`When you create an component with `}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{` method you can paste styles creator as the second argument. It will be called inside component render on each update so you may use `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-intro.html\"\n      }}>{`hooks`}</a>{` with it. One of the best feature of Stylerun is build in `}<inlineCode parentName=\"p\">{`useCssVar`}</inlineCode>{` hook that passed in the props, using it inside the styles creator callback automatically register created css-variables inside element styles.`}</p>\n    <p>{`Remember that styles creator return plain css with global values for `}<a parentName=\"p\" {...{\n        \"href\": \"#style\"\n      }}>{`Style`}</a>{` component, so for scoped styles defenition you should use passed `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { styled } from 'stylerun'\n\nconst TextArea = styled(\n  \\`textarea\\`,\n  ({ className }) => \\`\n    .\\${className} {\n      font-size: 1em;\n      outline: none;\n    }\n    .\\${className}:focus {\n      box-shadow: 0 0 1em indigo;\n    }\n  \\`\n)\n`}</code></pre>\n    <hr></hr>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { styled } from 'stylerun'\n\nconst AutoResizedInput = styled(\\`input\\`, ({ className, value = '', useCssVar }) => \\`\n  .\\${className} {\n    font-size: \\${useCssVar(\\`\\${Math.max(1, 2 - String(value).length * 0.1)}em\\`)}\n  }\n\\`)\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const [input, update] = React.useState(\\'\\')\\n\\n  return (\\n    <AutoResizedInput\\n      value={input}\\n      onChange={e => update(e.currentTarget.value)}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      AutoResizedInput,\n      Style,\n      styled,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">{() => {\n        const [input, update] = React.useState('');\n        return <AutoResizedInput value={input} onChange={e => update(e.currentTarget.value)} mdxType=\"AutoResizedInput\" />;\n      }}</Playground>\n    <h2 {...{\n      \"id\": \"usecssvar\"\n    }}><inlineCode parentName=\"h2\">{`useCssVar`}</inlineCode></h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\"\n      }}>{`Css-variables`}</a>{` is a most performant and flexible way to bring visual interaction to your application. Stylerun help to use it.`}</p>\n    <p><inlineCode parentName=\"p\">{`useCssVar`}</inlineCode>{` come from `}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{` props and accept string or number value and create object with one `}<strong parentName=\"p\">{`unique`}</strong>{` css-property name in the keys and and passed value in the value of property. It may be used as an `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/dom-elements.html#style\"\n      }}>{`style object`}</a>{` or spread in to it. Also it has `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"\n      }}><inlineCode parentName=\"a\">{`toString`}</inlineCode></a>{` method that returns css-variable for paste it in a styles.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Style } from 'stylerun'\n\nexport const Example1 = styled/*<{ color: string }>*/(\n  ({ color, useCssVar }) => {\n    const colorVar = useCssVar(color)\n\n    console.log(colorVar)            // { '--sr_var_1_qj2c': 'red' }\n    console.log(colorVar.toString()) // 'var(--sr_var_1_qj2c)'\n    console.log(colorVar + '')       // 'var(--sr_var_1_qj2c)'\n    console.log(\\`\\${colorVar}\\`)       // 'var(--sr_var_1_qj2c)'\n\n    return <>\n        <span style={colorVar} className=\"example-text\">text</span>\n        <Style>{\\`\n            .example-text {\n                color: \\${colorVar}\n            }\n        \\`}</Style>\n    </>\n  }\n)\n\n// Also you may paste optional name for generated value by the second argument\n\nexport const Example2 = styled/*<{ color: string, size: '2' }>*/(\n  ({ color, size, useCssVar }) => {\n    const colorVar = useCssVar(props.color)\n    const sizeVar = useCssVar(\\`\\${props.size}em\\`, 'size')\n\n    console.log(colorVar) // { '--sr_var_2_qj2c': 'red' }\n    console.log(sizeVar)  // { '--sr_size_3_qj2c': '2em' }\n\n    return <>\n        <span style={{...colorVar, ...sizeVar}} className=\"example-text\">text</span>\n        <Style>{\\`\n            .example-text {\n                color: \\${colorVar}\n                font-size: \\${sizeVar}\n            }\n        \\`}</Style>\n    </>\n  }\n)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}