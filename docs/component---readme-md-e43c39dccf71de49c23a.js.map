{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","align","href","width","title","isMDXComponent"],"mappings":"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","file":"component---readme-md-e43c39dccf71de49c23a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/codespace/workspace/stylerun/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/stylerun\"\n      }}><img alt=\"version\" src=\"https://img.shields.io/npm/v/stylerun\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://bundlephobia.com/result?p=stylerun@alpha\"\n      }}><img alt=\"bundle size\" src=\"https://img.shields.io/bundlephobia/minzip/stylerun\" /></a>{`\n`}<img alt=\"license\" src=\"https://img.shields.io/github/license/artalar/reatom\" />{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://gitpod.io/#https://github.com/artalar/stylerun\"\n      }}><img alt=\"Gitpod ready-to-code\" src=\"https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod\" /></a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/artalar/stylerun\"\n      }}><img alt=\"logo\" src=\"https://raw.githubusercontent.com/artalar/stylerun/main/logo.svg\" /></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`WORK IN PROGRESS`}</inlineCode></strong></p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Stylerun`}</strong>{` is natural and performant way to style your (P?)React application. It allow you to write styles in an JSX markup, like in plain HTML:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JSX\"\n      }}>{`import { Style } from 'stylerun';\nimport { TextInput } from 'example-ui-library'\n\nexport function Example() {\n  return (<>\n    <TextInput className=\"text-input\" />\n    <Style>{\\`\n      .text-input {\n        outline: none;\n      }\n      .text-input:focus {\n        box-shadow: 0 0 5px rgba(81, 203, 238, 1);\n      }\n    \\`}</Style>\n  </>)\n}\n`}</code></pre>\n    <p>{`It looks and feels like a plain CSS, but works much powerful because we use `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\n      }}>{`JavaScript Template literals (Template strings)`}</a>{` and may easily modify it at the runtime. Stylerun pass a couple of helpers (`}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`useCssVar`}</inlineCode>{` - (see below)`}{`[#API]`}{`) to boost it aproach and make it simple and performant.`}</p>\n    <h2 {...{\n      \"id\": \"motivation\"\n    }}>{`Motivation`}</h2>\n    <p>{`CSS-in-JS is a powerful approach with benefits like: simple dynamic styles, critical CSS and dead code elimination by design and many others. Stylerun, inspired by `}<a parentName=\"p\" {...{\n        \"href\": \"https://reshadow.dev\"\n      }}>{`Reshadow`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/vercel/styled-jsx\"\n      }}>{`styled-jsx`}</a>{`, try to get all that benefits, but keeping natural styling and reduce JS specificity.`}</p>\n    <p>{`Key features:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Natural API`}</li>\n      <li parentName=\"ul\">{`No limits for dynamic parts and values (+ helper for css-vars)`}</li>\n      <li parentName=\"ul\">{`Use components as selectors`}</li>\n      <li parentName=\"ul\">{`Only `}<a parentName=\"li\" {...{\n          \"href\": \"https://bundlephobia.com/result?p=stylerun@alpha\"\n        }}>{`0.5KB`}</a>{` bundle overhead`}</li>\n      <li parentName=\"ul\">{`A few times faster runtime than `}<a parentName=\"li\" {...{\n          \"href\": \"https://styled-components.com\"\n        }}>{`styled-components`}</a>{` or `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/cristianbote/goober\"\n        }}>{`goober`}</a>{` by lack of pre/post processor`}\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`TODO: benchmarks`}</p>\n        </blockquote>\n      </li>\n      <li parentName=\"ul\">{`No need a build time setup`}</li>\n    </ul>\n    <p>{`Limitations:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Stylerun coupled with (P?)React and has no native API`}</li>\n      <li parentName=\"ul\">{`Stylerun has no compiler (pre/post processor) thats prevent vendor prefixing and nesting (`}<inlineCode parentName=\"li\">{`&`}</inlineCode>{`) usage`}\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`TODO: `}<a parentName=\"p\" {...{\n              \"href\": \"https://github.com/artalar/stylerun/issues/19\"\n            }}>{`https://github.com/artalar/stylerun/issues/19`}</a></p>\n        </blockquote>\n      </li>\n      <li parentName=\"ul\">{`Stylerun has no built time static extraction and hasn't goal for that (but assumes integration with SSR / SSG)`}\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`TODO: `}<a parentName=\"p\" {...{\n              \"href\": \"https://github.com/artalar/stylerun/issues/7\"\n            }}>{`https://github.com/artalar/stylerun/issues/7`}</a></p>\n        </blockquote>\n      </li>\n      <li parentName=\"ul\">{`No `}<a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/docs/components-and-props.html#function-and-class-components\"\n        }}>{`class components`}</a>{` support`}\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`use `}<inlineCode parentName=\"p\">{`styled(props => <ClassComponent {...props}>)`}</inlineCode>{` instead`}</p>\n        </blockquote>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`You may be want to try (examples)`}{`[#examples]`}{` first.`}</p>\n    <h3 {...{\n      \"id\": \"style\"\n    }}>{`Style`}</h3>\n    <p>{`The Style component just cache and forward your styles into the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Glossary/Head\"\n      }}>{`head`}</a>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`See example`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"usecssvar\"\n    }}>{`useCssVar`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\"\n      }}>{`Css-variables`}</a>{` is a most performant and flexible way to bring visual interaction to your application. Stylerun help to use it.`}</p>\n    <p><inlineCode parentName=\"p\">{`useCssVar`}</inlineCode>{` accept string or number value and create object with one `}<strong parentName=\"p\">{`unique`}</strong>{` css-property name in the keys and and passed value in the value of property. It may be used as an `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/dom-elements.html#style\"\n      }}>{`style object`}</a>{` or spread in to it. Also it has `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"\n      }}><inlineCode parentName=\"a\">{`toString`}</inlineCode></a>{` method that returns css-variable for paste it in a styles.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JSX\"\n      }}>{`import { Style } from 'stylerun'\n\nexport const Example1 = styled/*<{ color: string }>*/(\n  ({ color, useCssVar }) => {\n    const colorVar = useCssVar(color)\n\n    console.log(colorVar)            // { '--sr_var_1_qj2c': 'red' }\n    console.log(colorVar.toString()) // 'var(--sr_var_1_qj2c)'\n    console.log(colorVar + '')       // 'var(--sr_var_1_qj2c)'\n    console.log(\\`\\${colorVar}\\`)       // 'var(--sr_var_1_qj2c)'\n\n    return <>\n        <span style={colorVar} className=\"example-text\">text</span>\n        <Style>{\\`\n            .example-text {\n                color: \\${colorVar}\n            }\n        \\`}</Style>\n    </>\n  }\n)\n\n// Also you may paste optional name for generated value by the second argument\n\nexport const Example2 = styled/*<{ color: string, size: '2' }>*/(\n  ({ color, size, useCssVar }) => {\n    const colorVar = useCssVar(props.color)\n    const sizeVar = useCssVar(\\`\\${props.size}em\\`, 'size')\n\n    console.log(colorVar) // { '--sr_var_2_qj2c': 'red' }\n    console.log(sizeVar)  // { '--sr_size_3_qj2c': '2em' }\n\n    return <>\n        <span style={{...colorVar, ...sizeVar}} className=\"example-text\">text</span>\n        <Style>{\\`\n            .example-text {\n                color: \\${colorVar}\n                font-size: \\${sizeVar}\n            }\n        \\`}</Style>\n    </>\n  }\n)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"styled\"\n    }}>{`styled`}</h3>\n    <p>{`Inspired by `}<a parentName=\"p\" {...{\n        \"href\": \"https://styled-components.com\"\n      }}>{`styled-component`}</a>{` Stylerun has `}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{` method for easily creation of styled components and wrap existed components to allow use it as selectors.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JSX\"\n      }}>{`import { styled } from 'stylerun'\n\n// classic input component with \\`className\\` prop and returns it \\`toString\\` method\nconst Input = styled('input')\nconsole.log(Input.className)  // 'sr_4_qj2c'\nconsole.log(Input.toString()) // '.sr_4_qj2c'\nconsole.log(Input + '')       // '.sr_4_qj2c'\nconsole.log(\\`\\${Input}\\`)       // '.sr_4_qj2c'\n// Fill free rewrite \\`className\\` for better debug\nInput.className = \\`input-example\\`\nconsole.log(Input.className)  // 'input-example'\nconsole.log(Input.toString()) // '.input-example'\nconsole.log(Input + '')       // '.input-example'\nconsole.log(\\`\\${Input}\\`)       // '.input-example'\n\nconst OtherInput = styled(Input)\nconsole.log(OtherInput.className)  // 'sr_5_qj2c'\n`}</code></pre>\n    <p>{`When you create an component with `}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{` method you can paste styles creator as the second argument. It will be called inside component render on each update so you may use `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-intro.html\"\n      }}>{`hooks`}</a>{` with it. One of the best feature of Stylerun is when you use `}<inlineCode parentName=\"p\">{`useCssVar`}</inlineCode>{` hook inside the styles creator callback it automatically register created css-variables inside element styles.`}</p>\n    <p>{`Remember that styles creator return plain css with global values (selectord), so for scoped defenition for created component you should use it as selector in them self.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JSX\"\n      }}>{`import { styled } from 'stylerun'\n\nconst Input = styled(\\`input\\`, ({ className, value = '', useCssVar }) => \\`\n  .\\${className} {\n    font-size: \\${useCssVar(\\`\\${Math.max(1, 2 - String(value).length * 0.1)}em\\`)}\n  }\n\\`)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h4 {...{\n      \"id\": \"component-as-selector\"\n    }}>{`Component as selector`}</h4>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Component should accept and apply `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` property.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JSX\"\n      }}>{`import { Style, styled } from 'stylerun';\nimport { TextInput as _TextInput } from 'example-ui-library'\n\nconst TextInput = styled(_TextInput)\n\nexport function Example() {\n  return (<>\n    <TextInput />\n    <Style>{\\`\n      \\${TextInput} {\n        outline: none;\n      }\n      \\${TextInput}:focus {\n        box-shadow: 0 0 5px rgba(81, 203, 238, 1);\n      }\n    \\`}</Style>\n  </>)\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"new-component\"\n    }}>{`New component`}</h4>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Component should accept and apply `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` property.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JSX\"\n      }}>{`import { styled } from 'stylerun';\n\nconst TextInput = styled('input', ({ className }) => \\`\n  .\\${className} {\n    outline: none;\n  }\n  .\\${className}:focus {\n    box-shadow: 0 0 5px rgba(81, 203, 238, 1);\n  }\n\\`)\n\nexport function Example() {\n  return (<>\n    <TextInput />\n  </>)\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"usecssvar-autobind\"\n    }}>{`useCssVar autobind`}</h4>\n    <p>{`In this example value from props will be updated on each frame, but documents styles not changes, only autobinded css-variable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JSX\"\n      }}>{`import { styled, useCssVar } from 'stylerun';\n\nconst TextInput = styled(\n  'input',\n  ({ shadowOpasity = 1, className, useCssVar }) => \\`\n    .\\${className} {\n      outline: none;\n    }\n    .\\${className}:focus {\n      box-shadow: 0 0 5px rgba(81, 203, 238, \\${useCssVar(shadowOpasity)});\n    }\n  \\`\n)\n\nexport function Example() {\n  const [shadowOpasity, update] = React.useState(0)\n\n  React.useEffect(() => {\n    requestAnimationFrame(() => {\n      update((shadowOpasity + 1) % 100)\n    })\n  }, [shadowOpasity])\n\n  return (<>\n    <TextInput shadowOpasity={shadowOpasity / 100}/>\n  </>)\n}\n`}</code></pre>\n    <p>{`Advanced example:`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/stylerun-vzw20\"\n      }}><img alt=\"Advanced example\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" /></a></p>\n    <h2 {...{\n      \"id\": \"contributors-\"\n    }}>{`Contributors ✨`}</h2>\n    <p>{`Thanks goes to these wonderful people (`}<a parentName=\"p\" {...{\n        \"href\": \"https://allcontributors.org/docs/en/emoji-key\"\n      }}>{`emoji key`}</a>{`):`}</p>\n    {\n      /* ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section */\n    }\n    {\n      /* prettier-ignore-start */\n    }\n    {\n      /* markdownlint-disable */\n    }\n    <table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/artalar\"><img src=\"https://avatars0.githubusercontent.com/u/27290320?v=4?s=100\" width=\"100px;\" alt=\"\" /><br /><sub><b>Arutyunyan Artyom</b></sub></a><br /><a href=\"https://github.com/artalar/stylerun/commits?author=artalar\" title=\"Code\">💻</a> <a href=\"#ideas-artalar\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#example-artalar\" title=\"Examples\">💡</a> <a href=\"https://github.com/artalar/stylerun/commits?author=artalar\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kancurochat\"><img src=\"https://avatars.githubusercontent.com/u/54439779?v=4?s=100\" width=\"100px;\" alt=\"\" /><br /><sub><b>Daniel Infante Pacheco</b></sub></a><br /><a href=\"#design-kancurochat\" title=\"Design\">🎨</a> <a href=\"https://github.com/artalar/stylerun/commits?author=kancurochat\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/scorpionknifes\"><img src=\"https://avatars.githubusercontent.com/u/23299540?v=4?s=100\" width=\"100px;\" alt=\"\" /><br /><sub><b>ZHENK</b></sub></a><br /><a href=\"https://github.com/artalar/stylerun/commits?author=scorpionknifes\" title=\"Documentation\">📖</a> <a href=\"#infra-scorpionknifes\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n  </tr>\n    </table>\n    {\n      /* markdownlint-restore */\n    }\n    {\n      /* prettier-ignore-end */\n    }\n    {\n      /* ALL-CONTRIBUTORS-LIST:END */\n    }\n    {\n      /* ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section */\n    }\n    {\n      /* ALL-CONTRIBUTORS-LIST:END */\n    }\n    <p>{`This project follows the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/all-contributors/all-contributors\"\n      }}>{`all-contributors`}</a>{` specification. Contributions of any kind welcome!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}