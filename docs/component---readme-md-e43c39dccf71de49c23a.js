(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"7OsV":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n("Fcif"),s=n("+I+c"),o=(n("mXGw"),n("/FXl")),r=n("TjRS"),l=(n("aD51"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"README.md"}});var c={_frontmatter:l},b=r.a;function p(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(o.b)(b,Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/stylerun"},Object(o.b)("img",{alt:"version",src:"https://img.shields.io/npm/v/stylerun"})),"\n",Object(o.b)("a",{parentName:"p",href:"https://bundlephobia.com/result?p=stylerun@alpha"},Object(o.b)("img",{alt:"bundle size",src:"https://img.shields.io/bundlephobia/minzip/stylerun"})),"\n",Object(o.b)("img",{alt:"license",src:"https://img.shields.io/github/license/artalar/reatom"}),"\n",Object(o.b)("a",{parentName:"p",href:"https://gitpod.io/#https://github.com/artalar/stylerun"},Object(o.b)("img",{alt:"Gitpod ready-to-code",src:"https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod"}))),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://github.com/artalar/stylerun"},Object(o.b)("img",{alt:"logo",src:"https://raw.githubusercontent.com/artalar/stylerun/main/logo.svg"}))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"WORK IN PROGRESS")))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Stylerun")," is natural and performant way to style your (P?)React application. It allow you to write styles in an JSX markup, like in plain HTML:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-JSX"},"import { Style } from 'stylerun';\nimport { TextInput } from 'example-ui-library'\n\nexport function Example() {\n  return (<>\n    <TextInput className=\"text-input\" />\n    <Style>{`\n      .text-input {\n        outline: none;\n      }\n      .text-input:focus {\n        box-shadow: 0 0 5px rgba(81, 203, 238, 1);\n      }\n    `}</Style>\n  </>)\n}\n")),Object(o.b)("p",null,"It looks and feels like a plain CSS, but works much powerful because we use ",Object(o.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"},"JavaScript Template literals (Template strings)")," and may easily modify it at the runtime. Stylerun pass a couple of helpers (",Object(o.b)("inlineCode",{parentName:"p"},"styled"),", ",Object(o.b)("inlineCode",{parentName:"p"},"useCssVar")," - (see below)","[#API]",") to boost it aproach and make it simple and performant."),Object(o.b)("h2",{id:"motivation"},"Motivation"),Object(o.b)("p",null,"CSS-in-JS is a powerful approach with benefits like: simple dynamic styles, critical CSS and dead code elimination by design and many others. Stylerun, inspired by ",Object(o.b)("a",{parentName:"p",href:"https://reshadow.dev"},"Reshadow")," and ",Object(o.b)("a",{parentName:"p",href:"https://github.com/vercel/styled-jsx"},"styled-jsx"),", try to get all that benefits, but keeping natural styling and reduce JS specificity."),Object(o.b)("p",null,"Key features:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Natural API"),Object(o.b)("li",{parentName:"ul"},"No limits for dynamic parts and values (+ helper for css-vars)"),Object(o.b)("li",{parentName:"ul"},"Use components as selectors"),Object(o.b)("li",{parentName:"ul"},"Only ",Object(o.b)("a",{parentName:"li",href:"https://bundlephobia.com/result?p=stylerun@alpha"},"0.5KB")," bundle overhead"),Object(o.b)("li",{parentName:"ul"},"A few times faster runtime than ",Object(o.b)("a",{parentName:"li",href:"https://styled-components.com"},"styled-components")," or ",Object(o.b)("a",{parentName:"li",href:"https://github.com/cristianbote/goober"},"goober")," by lack of pre/post processor",Object(o.b)("blockquote",{parentName:"li"},Object(o.b)("p",{parentName:"blockquote"},"TODO: benchmarks"))),Object(o.b)("li",{parentName:"ul"},"No need a build time setup")),Object(o.b)("p",null,"Limitations:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Stylerun coupled with (P?)React and has no native API"),Object(o.b)("li",{parentName:"ul"},"Stylerun has no compiler (pre/post processor) thats prevent vendor prefixing and nesting (",Object(o.b)("inlineCode",{parentName:"li"},"&"),") usage",Object(o.b)("blockquote",{parentName:"li"},Object(o.b)("p",{parentName:"blockquote"},"TODO: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/artalar/stylerun/issues/19"},"https://github.com/artalar/stylerun/issues/19")))),Object(o.b)("li",{parentName:"ul"},"Stylerun has no built time static extraction and hasn't goal for that (but assumes integration with SSR / SSG)",Object(o.b)("blockquote",{parentName:"li"},Object(o.b)("p",{parentName:"blockquote"},"TODO: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/artalar/stylerun/issues/7"},"https://github.com/artalar/stylerun/issues/7")))),Object(o.b)("li",{parentName:"ul"},"No ",Object(o.b)("a",{parentName:"li",href:"https://reactjs.org/docs/components-and-props.html#function-and-class-components"},"class components")," support",Object(o.b)("blockquote",{parentName:"li"},Object(o.b)("p",{parentName:"blockquote"},"use ",Object(o.b)("inlineCode",{parentName:"p"},"styled(props => <ClassComponent {...props}>)")," instead")))),Object(o.b)("h2",{id:"api"},"API"),Object(o.b)("p",null,"You may be want to try (examples)","[#examples]"," first."),Object(o.b)("h3",{id:"style"},"Style"),Object(o.b)("p",null,"The Style component just cache and forward your styles into the ",Object(o.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Head"},"head"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"See example")),Object(o.b)("h3",{id:"usecssvar"},"useCssVar"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"},"Css-variables")," is a most performant and flexible way to bring visual interaction to your application. Stylerun help to use it."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"useCssVar")," accept string or number value and create object with one ",Object(o.b)("strong",{parentName:"p"},"unique")," css-property name in the keys and and passed value in the value of property. It may be used as an ",Object(o.b)("a",{parentName:"p",href:"https://reactjs.org/docs/dom-elements.html#style"},"style object")," or spread in to it. Also it has ",Object(o.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString"},Object(o.b)("inlineCode",{parentName:"a"},"toString"))," method that returns css-variable for paste it in a styles."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-JSX"},"import { Style } from 'stylerun'\n\nexport const Example1 = styled/*<{ color: string }>*/(\n  ({ color, useCssVar }) => {\n    const colorVar = useCssVar(color)\n\n    console.log(colorVar)            // { '--sr_var_1_qj2c': 'red' }\n    console.log(colorVar.toString()) // 'var(--sr_var_1_qj2c)'\n    console.log(colorVar + '')       // 'var(--sr_var_1_qj2c)'\n    console.log(`${colorVar}`)       // 'var(--sr_var_1_qj2c)'\n\n    return <>\n        <span style={colorVar} className=\"example-text\">text</span>\n        <Style>{`\n            .example-text {\n                color: ${colorVar}\n            }\n        `}</Style>\n    </>\n  }\n)\n\n// Also you may paste optional name for generated value by the second argument\n\nexport const Example2 = styled/*<{ color: string, size: '2' }>*/(\n  ({ color, size, useCssVar }) => {\n    const colorVar = useCssVar(props.color)\n    const sizeVar = useCssVar(`${props.size}em`, 'size')\n\n    console.log(colorVar) // { '--sr_var_2_qj2c': 'red' }\n    console.log(sizeVar)  // { '--sr_size_3_qj2c': '2em' }\n\n    return <>\n        <span style={{...colorVar, ...sizeVar}} className=\"example-text\">text</span>\n        <Style>{`\n            .example-text {\n                color: ${colorVar}\n                font-size: ${sizeVar}\n            }\n        `}</Style>\n    </>\n  }\n)\n")),Object(o.b)("h3",{id:"styled"},"styled"),Object(o.b)("p",null,"Inspired by ",Object(o.b)("a",{parentName:"p",href:"https://styled-components.com"},"styled-component")," Stylerun has ",Object(o.b)("inlineCode",{parentName:"p"},"styled")," method for easily creation of styled components and wrap existed components to allow use it as selectors."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-JSX"},"import { styled } from 'stylerun'\n\n// classic input component with `className` prop and returns it `toString` method\nconst Input = styled('input')\nconsole.log(Input.className)  // 'sr_4_qj2c'\nconsole.log(Input.toString()) // '.sr_4_qj2c'\nconsole.log(Input + '')       // '.sr_4_qj2c'\nconsole.log(`${Input}`)       // '.sr_4_qj2c'\n// Fill free rewrite `className` for better debug\nInput.className = `input-example`\nconsole.log(Input.className)  // 'input-example'\nconsole.log(Input.toString()) // '.input-example'\nconsole.log(Input + '')       // '.input-example'\nconsole.log(`${Input}`)       // '.input-example'\n\nconst OtherInput = styled(Input)\nconsole.log(OtherInput.className)  // 'sr_5_qj2c'\n")),Object(o.b)("p",null,"When you create an component with ",Object(o.b)("inlineCode",{parentName:"p"},"styled")," method you can paste styles creator as the second argument. It will be called inside component render on each update so you may use ",Object(o.b)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-intro.html"},"hooks")," with it. One of the best feature of Stylerun is when you use ",Object(o.b)("inlineCode",{parentName:"p"},"useCssVar")," hook inside the styles creator callback it automatically register created css-variables inside element styles."),Object(o.b)("p",null,"Remember that styles creator return plain css with global values (selectord), so for scoped defenition for created component you should use it as selector in them self."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-JSX"},"import { styled } from 'stylerun'\n\nconst Input = styled(`input`, ({ className, value = '', useCssVar }) => `\n  .${className} {\n    font-size: ${useCssVar(`${Math.max(1, 2 - String(value).length * 0.1)}em`)}\n  }\n`)\n")),Object(o.b)("h2",{id:"examples"},"Examples"),Object(o.b)("h4",{id:"component-as-selector"},"Component as selector"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Component should accept and apply ",Object(o.b)("inlineCode",{parentName:"p"},"className")," property.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-JSX"},"import { Style, styled } from 'stylerun';\nimport { TextInput as _TextInput } from 'example-ui-library'\n\nconst TextInput = styled(_TextInput)\n\nexport function Example() {\n  return (<>\n    <TextInput />\n    <Style>{`\n      ${TextInput} {\n        outline: none;\n      }\n      ${TextInput}:focus {\n        box-shadow: 0 0 5px rgba(81, 203, 238, 1);\n      }\n    `}</Style>\n  </>)\n}\n")),Object(o.b)("h4",{id:"new-component"},"New component"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Component should accept and apply ",Object(o.b)("inlineCode",{parentName:"p"},"className")," property.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-JSX"},"import { styled } from 'stylerun';\n\nconst TextInput = styled('input', ({ className }) => `\n  .${className} {\n    outline: none;\n  }\n  .${className}:focus {\n    box-shadow: 0 0 5px rgba(81, 203, 238, 1);\n  }\n`)\n\nexport function Example() {\n  return (<>\n    <TextInput />\n  </>)\n}\n")),Object(o.b)("h4",{id:"usecssvar-autobind"},"useCssVar autobind"),Object(o.b)("p",null,"In this example value from props will be updated on each frame, but documents styles not changes, only autobinded css-variable."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-JSX"},"import { styled, useCssVar } from 'stylerun';\n\nconst TextInput = styled(\n  'input',\n  ({ shadowOpasity = 1, className, useCssVar }) => `\n    .${className} {\n      outline: none;\n    }\n    .${className}:focus {\n      box-shadow: 0 0 5px rgba(81, 203, 238, ${useCssVar(shadowOpasity)});\n    }\n  `\n)\n\nexport function Example() {\n  const [shadowOpasity, update] = React.useState(0)\n\n  React.useEffect(() => {\n    requestAnimationFrame(() => {\n      update((shadowOpasity + 1) % 100)\n    })\n  }, [shadowOpasity])\n\n  return (<>\n    <TextInput shadowOpasity={shadowOpasity / 100}/>\n  </>)\n}\n")),Object(o.b)("p",null,"Advanced example:"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://codesandbox.io/s/stylerun-vzw20"},Object(o.b)("img",{alt:"Advanced example",src:"https://codesandbox.io/static/img/play-codesandbox.svg"}))),Object(o.b)("h2",{id:"contributors-"},"Contributors ✨"),Object(o.b)("p",null,"Thanks goes to these wonderful people (",Object(o.b)("a",{parentName:"p",href:"https://allcontributors.org/docs/en/emoji-key"},"emoji key"),"):"),Object(o.b)("table",null,Object(o.b)("tr",null,Object(o.b)("td",{align:"center"},Object(o.b)("a",{href:"https://github.com/artalar"},Object(o.b)("img",{src:"https://avatars0.githubusercontent.com/u/27290320?v=4?s=100",width:"100px;",alt:""}),Object(o.b)("br",null),Object(o.b)("sub",null,Object(o.b)("b",null,"Arutyunyan Artyom"))),Object(o.b)("br",null),Object(o.b)("a",{href:"https://github.com/artalar/stylerun/commits?author=artalar",title:"Code"},"💻")," ",Object(o.b)("a",{href:"#ideas-artalar",title:"Ideas, Planning, & Feedback"},"🤔")," ",Object(o.b)("a",{href:"#example-artalar",title:"Examples"},"💡")," ",Object(o.b)("a",{href:"https://github.com/artalar/stylerun/commits?author=artalar",title:"Documentation"},"📖")),Object(o.b)("td",{align:"center"},Object(o.b)("a",{href:"https://github.com/kancurochat"},Object(o.b)("img",{src:"https://avatars.githubusercontent.com/u/54439779?v=4?s=100",width:"100px;",alt:""}),Object(o.b)("br",null),Object(o.b)("sub",null,Object(o.b)("b",null,"Daniel Infante Pacheco"))),Object(o.b)("br",null),Object(o.b)("a",{href:"#design-kancurochat",title:"Design"},"🎨")," ",Object(o.b)("a",{href:"https://github.com/artalar/stylerun/commits?author=kancurochat",title:"Documentation"},"📖")),Object(o.b)("td",{align:"center"},Object(o.b)("a",{href:"https://github.com/scorpionknifes"},Object(o.b)("img",{src:"https://avatars.githubusercontent.com/u/23299540?v=4?s=100",width:"100px;",alt:""}),Object(o.b)("br",null),Object(o.b)("sub",null,Object(o.b)("b",null,"ZHENK"))),Object(o.b)("br",null),Object(o.b)("a",{href:"https://github.com/artalar/stylerun/commits?author=scorpionknifes",title:"Documentation"},"📖")," ",Object(o.b)("a",{href:"#infra-scorpionknifes",title:"Infrastructure (Hosting, Build-Tools, etc)"},"🚇")))),Object(o.b)("p",null,"This project follows the ",Object(o.b)("a",{parentName:"p",href:"https://github.com/all-contributors/all-contributors"},"all-contributors")," specification. Contributions of any kind welcome!"))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"README.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---readme-md-e43c39dccf71de49c23a.js.map